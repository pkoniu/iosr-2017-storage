#!/usr/bin/env node

require('dotenv').config();

let server, port;

const MongoClient = require('mongodb').MongoClient;
const mongoUrl = `mongodb://${process.env.MONGO_HOST}:${process.env.MONGO_PORT}/${process.env.DB_NAME}`;
console.log(`Connecting to: ${mongoUrl}`);

MongoClient.connect(mongoUrl)
    .then(mongodb => {
        console.log(`Connected to db.`);
        
        const app = require('../src/app')(mongodb);
        const debug = require('debug')('iosr-2017:server');
        const http = require('http');

        port = normalizePort(process.env.PORT || '3000');
        app.set('port', port);

        server = http.createServer(app);

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(error => {
        console.log('Connecting failed.');
        console.log(error);
        process.exit(1);
    });

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
